// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniversityProject.Infrustructure.Data;

#nullable disable

namespace UniversityProject.Infrustructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241029230033_Add DepartmentId to Sections")]
    partial class AddDepartmentIdtoSections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DoctorId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("HallName")
                        .HasColumnType("VARCHAR(2)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HallName");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId")
                        .IsUnique()
                        .HasFilter("[ManagerId] IS NOT NULL");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeName")
                        .HasColumnType("VARCHAR(5)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("OfficeName");

                    b.ToTable("Doctor", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Hall", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(2)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("DeprtmentId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Name");

                    b.HasIndex("DeprtmentId");

                    b.ToTable("Hall", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Lab", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(4)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("DeprtmentId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Name");

                    b.HasIndex("DeprtmentId");

                    b.ToTable("Lab", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Office", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(5)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("DeprtmentId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("For")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Name");

                    b.HasIndex("DeprtmentId");

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("LabName")
                        .HasColumnType("VARCHAR(4)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.Property<int?>("TeachingAssistantId")
                        .HasColumnType("int");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LabName");

                    b.HasIndex("TeachingAssistantId");

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("DepId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Term")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepId");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentCourse", b =>
                {
                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("CourseId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourse", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentDoctors", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "DoctorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("StudentDoctors", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentSections", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "SectionId");

                    b.HasIndex("SectionId");

                    b.ToTable("StudentSections", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentTeachingAssistants", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TeachingAssistantId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "TeachingAssistantId");

                    b.HasIndex("TeachingAssistantId");

                    b.ToTable("StudentTeachingAssistants", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.TeachingAssistant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeName")
                        .HasColumnType("VARCHAR(5)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("OfficeName");

                    b.ToTable("TeachingAssistant", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("OfficeName")
                        .HasColumnType("VARCHAR(5)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OfficeName");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Userid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Userid");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Course", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Doctor", "Doctor")
                        .WithMany("Courses")
                        .HasForeignKey("DoctorId");

                    b.HasOne("UniversityProject.Data.Entities.Hall", "Hall")
                        .WithMany("Courses")
                        .HasForeignKey("HallName");

                    b.Navigation("Department");

                    b.Navigation("Doctor");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Department", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Doctor", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Doctor", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Department")
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Office", "Office")
                        .WithMany("Doctors")
                        .HasForeignKey("OfficeName");

                    b.Navigation("Department");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Hall", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Deprtment")
                        .WithMany()
                        .HasForeignKey("DeprtmentId");

                    b.Navigation("Deprtment");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Lab", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Deprtment")
                        .WithMany()
                        .HasForeignKey("DeprtmentId");

                    b.Navigation("Deprtment");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Office", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Deprtment")
                        .WithMany()
                        .HasForeignKey("DeprtmentId");

                    b.Navigation("Deprtment");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Section", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Department", "Department")
                        .WithMany("Sections")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Lab", "Lab")
                        .WithMany("Sections")
                        .HasForeignKey("LabName");

                    b.HasOne("UniversityProject.Data.Entities.TeachingAssistant", "TeachingAssistant")
                        .WithMany("Sections")
                        .HasForeignKey("TeachingAssistantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Course");

                    b.Navigation("Department");

                    b.Navigation("Lab");

                    b.Navigation("TeachingAssistant");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Student", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Department")
                        .WithMany("Students")
                        .HasForeignKey("DepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentCourse", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentDoctors", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Doctor", "Doctor")
                        .WithMany("StudentDoctors")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Student", "Student")
                        .WithMany("StudentDoctors")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentSections", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Section", "Section")
                        .WithMany("StudentSections")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Student", "student")
                        .WithMany("StudentSections")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");

                    b.Navigation("student");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.StudentTeachingAssistants", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Student", "Student")
                        .WithMany("StudentTeachingAssistants")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.TeachingAssistant", "TeachingAssistant")
                        .WithMany("StudentTeachingAssistants")
                        .HasForeignKey("TeachingAssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("TeachingAssistant");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.TeachingAssistant", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Department", "Department")
                        .WithMany("TeachingAssistants")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityProject.Data.Entities.Office", "Office")
                        .WithMany("TeachingAssistants")
                        .HasForeignKey("OfficeName");

                    b.Navigation("Department");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.User", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeName");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.UserToken", b =>
                {
                    b.HasOne("UniversityProject.Data.Entities.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("Userid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Course", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("StudentCourses");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Doctors");

                    b.Navigation("Sections");

                    b.Navigation("Students");

                    b.Navigation("TeachingAssistants");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Doctor", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("StudentDoctors");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Hall", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Lab", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Office", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("TeachingAssistants");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Section", b =>
                {
                    b.Navigation("StudentSections");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.Student", b =>
                {
                    b.Navigation("StudentCourses");

                    b.Navigation("StudentDoctors");

                    b.Navigation("StudentSections");

                    b.Navigation("StudentTeachingAssistants");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.TeachingAssistant", b =>
                {
                    b.Navigation("Sections");

                    b.Navigation("StudentTeachingAssistants");
                });

            modelBuilder.Entity("UniversityProject.Data.Entities.User", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
